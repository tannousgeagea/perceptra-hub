# Generated by Django 4.2 on 2025-10-23 16:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0003_alter_organization_options_organization_created_by_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SecretRef',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credential_ref_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('provider', models.CharField(choices=[('vault', 'HashiCorp Vault'), ('azure_kv', 'Azure Key Vault'), ('aws_sm', 'AWS Secrets Manager'), ('local_enc', 'Local Encrypted Storage')], help_text='Secret management provider', max_length=20)),
                ('path', models.CharField(help_text='Path or identifier in the secret provider', max_length=500)),
                ('key', models.CharField(help_text='Specific key/field name within the secret', max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for secret retrieval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secret_refs', to='organizations.organization')),
            ],
            options={
                'verbose_name': 'Secret Reference',
                'verbose_name_plural': 'Secret References',
                'db_table': 'storage_secret_ref',
            },
        ),
        migrations.CreateModel(
            name='StorageProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_profile_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(help_text='Human-readable profile name', max_length=100)),
                ('backend', models.CharField(choices=[('azure', 'Azure Blob Storage'), ('s3', 'Amazon S3'), ('minio', 'MinIO / S3-compatible'), ('local', 'Local Filesystem')], help_text='Storage backend type', max_length=20)),
                ('region', models.CharField(blank=True, help_text='Region or location (for cloud providers)', max_length=50, null=True)),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default storage profile for the tenant')),
                ('config', models.JSONField(default=dict, help_text='Backend-specific configuration (excluding secrets). Examples: bucket_name, container_name, base_path, endpoint_url')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this profile is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('credential_ref', models.ForeignKey(blank=True, help_text='Reference to stored credentials', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='storage_profiles', to='storage.secretref')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_profiles', to='organizations.organization')),
            ],
            options={
                'verbose_name': 'Storage Profile',
                'verbose_name_plural': 'Storage Profiles',
                'db_table': 'storage_profile',
            },
        ),
        migrations.CreateModel(
            name='EncryptedSecret',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('identifier', models.CharField(help_text='Unique identifier for this secret', max_length=255)),
                ('encrypted_value', models.TextField(help_text='Fernet-encrypted secret data')),
                ('description', models.TextField(blank=True, help_text='Description of what this secret is for')),
                ('encryption_version', models.PositiveSmallIntegerField(default=1, help_text='Encryption key version used for this secret')),
                ('last_decrypted_at', models.DateTimeField(blank=True, help_text='Timestamp of last successful decryption (for audit)', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='encrypted_secrets', to='organizations.organization')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Encrypted Secret',
                'verbose_name_plural': 'Encrypted Secrets',
                'db_table': 'storage_encrypted_secret',
            },
        ),
        migrations.AddIndex(
            model_name='storageprofile',
            index=models.Index(fields=['organization', 'is_default'], name='storage_pro_organiz_698fe8_idx'),
        ),
        migrations.AddIndex(
            model_name='storageprofile',
            index=models.Index(fields=['organization', 'backend'], name='storage_pro_organiz_d231df_idx'),
        ),
        migrations.AddIndex(
            model_name='storageprofile',
            index=models.Index(fields=['is_active'], name='storage_pro_is_acti_176fd6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storageprofile',
            unique_together={('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='secretref',
            index=models.Index(fields=['organization', 'provider'], name='storage_sec_organiz_9321bb_idx'),
        ),
        migrations.AddIndex(
            model_name='encryptedsecret',
            index=models.Index(fields=['organization', 'identifier'], name='storage_enc_organiz_eb3c2c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='encryptedsecret',
            unique_together={('organization', 'identifier')},
        ),
    ]
